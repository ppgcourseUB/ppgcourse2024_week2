// command line including necessary parameters:
// slim -t -m -d "Ne=500" -d "L=30000" -d "rate_ben=0.1" -d "rate_del=0.85" -d "s_backg_ben=0.005" -d "s_backg_del=-0.05" -d "ind_sample_size=25" -d "file_output1='~/slim.test_file.txt'" ./slim_template.slim

// set up a simple neutral simulation
initialize() {

	if (exists("slimgui")) {
		defineConstant("Ne",500); //number of diploid infdividuals
		defineConstant("L",500000); //length of the genome		
		
		defineConstant("rate_ben",0.05); //rate beneficial mutations versus neutral (1) and deleterious
		defineConstant("rate_del",0.85); //rate deleterious mutations versus neutral (1) annd benficial
		defineConstant("s_backg_ben",+0.005);	//s of beneficial background 
		defineConstant("s_backg_del",-0.05);	//s of deleteriious background 

		defineConstant("ind_sample_size",25); //number of samples to use
		defineConstant("file_output1","~/slim.test_file.txt"); //name of output file
	}

	defineConstant("mut_rate",1e-6);	
	defineConstant("rec_rate",1e-4);
	defineConstant("ngenes",100); //number of independent genes

	defineConstant("out_sample_size",1); //number of outgroup samples to use

//define a fixed demographic process plus a possible selective sweep before sampling
	defineConstant("tsplit",5*Ne); //time split outgroup
	defineConstant("tend",15*Ne); //time end

	initializeSLiMOptions(nucleotideBased=T);
	initializeAncestralNucleotides(randomNucleotides(L));
	
	//separate each gene using recombination 0.5
	rrates = NULL;
	ends = NULL;
	len = asInteger(L/ngenes-1);
	for(i in 1:ngenes) {
		rrates = c(rrates,rec_rate,0.5);
		ends = c(ends,len,len+1);
		len = len + asInteger(L/ngenes); 
	}	
	rrates = rrates[0:(2*ngenes-2)];
	ends = ends[0:(2*ngenes-2)];
	initializeRecombinationRate(rrates,ends); 

	// m1 mutation type: (neutral)
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	// m2 mutation type: (deleterious)
	if(s_backg_del==0) {initializeMutationTypeNuc("m2", 1.0, "f", s_backg_del);}
	else { initializeMutationTypeNuc("m2", 0.5, "f", s_backg_del);}
	// m3 mutation type: (beneficial)
	initializeMutationTypeNuc("m3", 0.5, "f", s_backg_ben);

	// g1 genomic element type: (synonymous) uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0,mmJukesCantor(mut_rate/3));
	// g2 genomic element type: (nonsynonymous) uses all mutations
	initializeGenomicElementType("g2", c(m1,m2,m3), c(1.0-(rate_del+rate_ben),rate_del,rate_ben),mmJukesCantor(mut_rate/3));

	//the chromosome is made with L/3 codons having two nonsyn + 1 syn position
	types = rep(c(g2,g2,g1), asInteger(L/3));
	if(L%3==1) {types=c(types,g2);}
	if(L%3==2) {types=c(types,g2,g2);}
	position = seq(0,L-1);
	initializeGenomicElement(types, position, position); //each codon contains g2,g2,g1
}

//START SIMULATION
1 early() {
	sim.addSubpop("p1", Ne); //create initial population and run up to equilibrium for 10Ne gen.
	community.rescheduleScriptBlock(s1, start=tsplit, end=tsplit); //split OUTG
	community.rescheduleScriptBlock(s2, start=tend, end=tend); //end simulation. Print data
}

// Split de p1 in the generation 5000
s1 50000 early() { sim.addSubpopSplit("p2", Ne, p1); }

// Run up 10000 generations
s2 100000 late() {
	//OUTPUT
	// Select no samples from the outgroup and ni samples of the target population and output
	// obtain random samples of genomes from the three subpopulations
	g_1 = sample(p2.genomes,2*ind_sample_size,F);
	g_2 = sample(p1.genomes,2*out_sample_size,F);
	//Concatenate the 2 samples
	g_12=c(g_1,g_2);
	//Get the unique mutations in the sample, sorted by position
	m = sortBy(unique(g_12.mutations),"position");
	
	//separate mutations of element g2 or/and in codon position 1 and 2 (nonsyn) 
	nonsyn_m = m[(m.position+1) % 3 != 0];
	//separate mutations of element g1 or/and in codon position 3 (syn)
	syn_m = m[(m.position+1) % 3 == 0];
	//look for polymorphisms and substitutions in target population that are fixed in outgroup
	sfs = array(rep(0,2*(2*ind_sample_size+3)),dim=c(2,2*ind_sample_size+3));
	//SFS for nonsyn
	for(position in nonsyn_m.position) {
		fr = 0; //frequency of each variant
		for(genome in g_1) {
			fr = fr + sum(match(position,genome.mutations.position) >= 0);
		}
		fro = 0;
		for(genome in g_2) {
			fro = fro + sum(match(position,genome.mutations.position) >= 0);
		}
		//print("fro="+fro);
		if(fr>0 & fro==0) {
			sfs[0,fr-1] = sfs[0,fr-1] + 1;
		}
		if(fr==0 & fro==2*out_sample_size) {
			sfs[0,2*ind_sample_size-1] = sfs[0,2*ind_sample_size-1] + 1;
			//number of beneficial substitutions (m3)
			if(nonsyn_m.mutationType[which(nonsyn_m.position==position)[0]]==m3) { 
				sfs[0,2*ind_sample_size+2]	= sfs[0,2*ind_sample_size+2] + 1; 
			}
		}
	}	
	//SFS for nsyn
	for(position in syn_m.position) {
		fr = 0;
		for(genome in g_1) {
			fr = fr + sum(match(position,genome.mutations.position) >= 0);
		}
		fro = 0;
		for(genome in g_2) {
			fro = fro + sum(match(position,genome.mutations.position) >= 0);
		}
		if(fr>0 & fro==0) {
			sfs[1,fr-1] = sfs[1,fr-1] + 1;
		}
		if(fr==0 & fro==2*out_sample_size) {
			sfs[1,2*ind_sample_size-1] = sfs[1,2*ind_sample_size-1] + 1;
		}
	}
	//include length of sequences and move the divegence like in polyDFE output
	sfs[0,2*ind_sample_size+0] = sfs[0,2*ind_sample_size-1];
	sfs[0,2*ind_sample_size-1] = asInteger(L*2/3);
	sfs[0,2*ind_sample_size+1] = asInteger(L*2/3);
	sfs[1,2*ind_sample_size+0] = sfs[1,2*ind_sample_size-1];
	sfs[1,2*ind_sample_size-1] = asInteger(L*1/3);
	sfs[1,2*ind_sample_size+1] = asInteger(L*1/3);
	
	//manipulate for easy print of sfs matrix
	print_header = "SFS";
	print_header = print_header + paste("	fr"+c(1:(2*ind_sample_size-1)));
	print_header = print_header + "	" + "PosP" + "	" + "Fixed" + "	" + "PosF" + "	" + "FixBen";
	print_sfs_nsyn = "nsyn" + "	";
	print_sfs_syn  = "syn" + "	";
	for(i in c(0:(2*ind_sample_size+2))) {
		print_sfs_nsyn = print_sfs_nsyn + sfs[0,i] + "	"; 
		print_sfs_syn  = print_sfs_syn  + sfs[1,i] + "	"; 
	}
	
	//OUTPUT:
	//for syn and for nonsyn:
	// print the sfs of target, the substitutions vs outgroup and the total sites
	print("Saving results to file " + file_output1);
	writeFile(filePath=file_output1,contents=(print_header),append=F);
	writeFile(filePath=file_output1,contents=(print_sfs_nsyn),append=T);
	writeFile(filePath=file_output1,contents=(print_sfs_syn),append=T);
	
	////print all information
	//sim.outputFull();
			
	print("Simulation finished");
}
